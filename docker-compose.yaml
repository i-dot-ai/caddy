services:
  nginx:
    image: nginx:alpine
    ports:
      - "8080:80"    # model
      - "8081:81"    # client
      - "8082:82"    # frontend
    volumes:
      - ./docker-compose-config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker-compose-config/user-switcher.conf:/etc/nginx/user-switcher.conf:ro
    depends_on:
      - model
      - frontend
      - client
    networks:
      - caddy-net
    restart: unless-stopped

  model:
    build:
      context: ./model
    expose:
      - "8080"
    volumes:
      - ./model:/app
      - /app/.venv # do not clobber installed venv
    healthcheck:
      test: curl --fail 'http://localhost:8080/healthcheck' || exit 1
      start_period: 60s
      interval: 5s
      retries: 12
    depends_on:
      qdrant:
        condition: service_healthy
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - caddy-net
    env_file: "docker-compose-config/.env"

  frontend:
    build:
      context: ./frontend
    expose:
      - "4322"
    entrypoint: npm run dev
    env_file: "docker-compose-config/.env"
    networks:
      - caddy-net
    volumes:
      - ./frontend:/app
      - /app/node_modules
    healthcheck:
      test: curl --fail 'http://localhost:4322/' || exit 1
      start_period: 60s
      interval: 5s
      retries: 12
    depends_on:
      model:
        condition: service_healthy

  qdrant:
    image: qdrant/qdrant
    ports:
      - '6333:6333'
      - '6334:6334'
    expose:
      - 6333
      - 6334
      - 6335
    env_file: .env
    restart: always
    volumes:
      - qdrant_storage:/qdrant/storage:z
    networks:
      - caddy-net

  postgres:
    image: pgvector/pgvector:pg17
    ports:
      - '5432:5432'
    environment:
    - POSTGRES_USER=root # because root will execute the init script
    - POSTGRES_PASSWORD=postgres
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data:Z
      - ./model/scripts/postgres-init.sql:/docker-entrypoint-initdb.d/postgres-init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      retries: 12
      start_period: 60s
      interval: 5s
    networks:
      - caddy-net

  minio:
    image: minio/minio
    expose:
      - "9000"
      - "9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    command: server --console-address ":9001" /data
    networks:
      - caddy-net
    volumes:
      - minio_data:/var/lib/minio/data:Z
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "mc", "ready", "local" ]
      retries: 12
      start_period: 60s
      interval: 5s

  client:
    image: public.ecr.aws/idotai/gov-ai-client:068ee7adce7c62c6836239c57415d517cf870dd5
    container_name: gov-ai-client
    expose:
      - "8081"
    env_file: "docker-compose-config/.env"
    networks:
      - caddy-net

  welcome:
    restart: no
    build:
      context: docker-compose-config
      dockerfile: welcome.Dockerfile
    depends_on:
      frontend:
        condition: service_healthy

volumes:
  postgres_data:
  qdrant_storage:
  minio_data:

networks:
  caddy-net:
