"""add TextChunk

Revision ID: 357bfc5f40d2
Revises: 46dd2326fb04
Create Date: 2025-06-17 09:14:10.821086

"""

from typing import Sequence, Union

import pgvector
import sqlalchemy as sa
import sqlmodel

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "357bfc5f40d2"  # pragma: allowlist secret
down_revision: Union[str, None] = "46dd2326fb04"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    op.execute("CREATE EXTENSION IF NOT EXISTS vector;")
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "textchunk",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("resource_id", sa.Uuid(), nullable=False),
        sa.Column("text", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "embedding", pgvector.sqlalchemy.vector.VECTOR(dim=1024), nullable=False
        ),
        sa.Column("order", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["resource_id"], ["resource.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_textchunk_resource_id"), "textchunk", ["resource_id"], unique=False
    )
    op.create_index(
        op.f("ix_resource_collection_id"), "resource", ["collection_id"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_resource_collection_id"), table_name="resource")
    op.drop_index(op.f("ix_textchunk_resource_id"), table_name="textchunk")
    op.drop_table("textchunk")
    # ### end Alembic commands ###
